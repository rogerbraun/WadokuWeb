class EntryDecorator < ApplicationDecorator
  decorates :entry
  allows :full_html

  def full_html(root_url = "/")
    

    res_html = midashigo_with_furigana

    res_html += audio_tag

    res_html += " "

    res_html += rest_midashigo.empty? ? "" : rest_midashigo.join(";")

    res_html += entry_information(root_url)

    res_html += picture_tag

    res_html

  end


  def midashigo_with_furigana
    h.content_tag(:span, :class => "writing") do 
      h.content_tag(:ruby) do
        h.content_tag(:rb, first_midashigo) +
        furigana
      end
    end
  end

  def furigana
    if first_midashigo == cleaned_kana then 
      "".html_safe
    else
      h.content_tag(:rp, " (") +
      h.content_tag(:rt, cleaned_kana) +
      h.content_tag(:rp, " )")
    end
  end

  def picture_tag
    begin 
      tree = entry.parse
      tree.subtree(:pict).map do |pict|
        "<span class='svg_image'><span class='image_caption'>#{pict[:pict][:capt]}</span><span class='svg'><a href='/svg/#{pict[:pict][:filen]}.svg'><img src='/svg/#{pict[:pict][:filen]}.svg' type='image/svg+xml' /></a></span></span>"
      end.join(" ").html_safe
    rescue => e
      ""
    end

    begin 
      tree = entry.parse
    rescue => e
      tree = nil
    end
    if tree
      pict = tree.subtree(:pict).first
      if pict then
        h.content_tag :span, :class => "svg_image" do
          h.content_tag(:span, pict[:pict][:capt], :class => "svg_caption") +
          h.content_tag(:span, :class => "svg") do
            svg_url = "/svg/#{pict[:pict][:filen]}.svg"
            h.link_to h.image_tag(svg_url, :type => "image/svg+xml"), svg_url
          end
        end
      end
    end

  end

  def audio_tag
    begin 
      tree = entry.parse
    rescue => e
      tree = nil
    end
    if tree
      audio = tree.subtree(:audio).first
      if audio then
        h.content_tag(:span, :class => "pron_audio") do
          h.link_to "Aussprache", "/audio/#{audio[:audio][:text]}.mp3"
        end
      end
    end
  end

  def first_midashigo
    entry.midashigo.split(";").first
  end

  def rest_midashigo 
    entry.midashigo.split(";")[1..-1]
  end

  def cleaned_kana
    entry.kana[/[^\d\[\]\s]+/]
  end

  def entry_information(root_url = "")
    begin
      HTMLTransform.new.apply(entry.parse).html_safe
    rescue => e
      e.to_s + " " + entry.definition
    end
  end
  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end

end

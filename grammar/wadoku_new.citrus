grammar WadokuGrammar

  rule entry
    (pos? space* body) {
      def to_html
        body.to_html
      end
    }
  end

  rule body
    (subs:(subentry+) space*) {
      def to_html
        subs.matches.map(&:to_html).join(" ")
      end
    }
  end

  rule noun
    "N."
  end
  
  rule verb
    ("1" | "5") "‑st." space ("trans." | "intrans.") space "V." space "auf" transcr  
  end

  rule pos_part
    noun | verb
  end

  rule pos_old
    ("(<POS: " pos_part+ ">)") {
      def to_html
        "POS"
      end
    }
  end

  rule pos
    /\(<POS:.*?>\)/ {
      def to_html
        "POS"
      end
    }
  end

  rule usage
    ("(<Usage: " words ">)") {
      def to_html
        "(<span class='usage'>#{words.to_html}</span>)"
      end
    }
  end

  rule audio_tag
    ("(<Audio: " words ">)") {
      def to_html
        ""
      end
  end

  rule transcr
    ("<Transcr.: " word ">") {
      def to_html
        "<span class='transcr'>#{word.to_html}</span>"
      end   
    }
  end 
    
  rule marker
    ("<" word ">" space* rest:(constituents | nothing)) {
      def to_html
        "<span class='#{word.to_html.downcase}'>#{rest.to_html}</span>"
      end
    }
  end

  rule number
    ("[" num:[0-9] "]" space*) {
      def to_html
        "[#{num}]: "
      end
    }
  end

  rule subentry
    (number? fi:(subsubentry*) subsubentry_final) {
      def to_html
        (number ? number.to_html : "") + (fi.matches.map{|m| m.to_html} << subsubentry_final.to_html).join(" ")
      end 
  }  
  end

  rule subsubentry_final
    (constituents seperator:(".") space*) {
      def to_html
        constituents.to_html + seperator.to_s
      end
    }
  end

  rule subsubentry
    (constituents seperator:(";") space*) {
      def to_html
        constituents.to_html + seperator.to_s
      end
    }
  end
  
  rule constituents
    (constituent rest:(constituents | nothing)) {
      def to_html
        constituent.to_html + rest.to_html 
      end
    }
  end

  rule constituent
    ( ref |  def | expl | dom | usage | gen_mark | word | marker) 
  end

  rule paren_child
    (content:(def | expl) seperator:";"? space* ) {
      def to_html
        content.to_html + (seperator ? seperator.to_html : "")
      end
    }
  end

  rule parenthesized
    "(" content:(paren_child+) ")" {
      def to_html
        "(" + content.map(&:to_html).join("") + ")"
      end
    }
  end

  rule expl
    ("(<Expl.:" space* real_words ">)" white:(space*)) {
      def to_html
        "(<span class='expl'>#{real_words.to_html}</span>)#{white}"
      end
    }
  end

  rule def
    ("(<Def.:" space* real_words ">)" white:(space*)) {
      def to_html
        "(<span class='def'>#{real_words.to_html}</span>)#{white}"
      end
    }
  end

  rule real_words
    (word "." | space | word)+ {
      def to_html
        self.to_s
      end 
    }
  end

  rule jap
    ("<Jap.:" space* content:(/[^>]+/) ">" space*) {
      def to_html
        content.to_s
      end
    }
  end

  rule daid
    ("<DaID:" space* content:([0-9]+) ">" space*) {
      def to_html
        content.to_s
      end
    }
  end

  rule ref
    ( "(<Ref.:" space* arrow:("⇒" | "→" | "⇔" ) space* transcr space* jap space* daid space* ">)" space* ) {
      def to_html
        "(#{arrow} <a href='<<<ROOT_URL>>>entries/by-daid/#{daid.to_html}'>#{jap.to_html} - #{transcr.to_html}</a>)"
      end
    }
  end

  rule dom
    ("{<Dom.:" space* domain:real_words ">}" white:(space*)) {
      def to_html
        "<span class='dom'><a href='<<<ROOT_URL>>>entries/by-dom/#{CGI.escape(domain.chop.downcase)}'>#{domain}</a></span>#{white}"
      end
    }
  end

  rule gen_mark
    (marked:word "<Gen.:" space sex:word ">" white:(space*)) {
      def to_html
        "<span class='gen_#{sex.to_html.downcase}'>#{marked.to_html}</span>#{white}"
      end
    }
  end

  rule letter
    [\/‑\-a-zA-ZäüöÄÜÖßōīēāū\w,·’…]
  end

  rule nothing
    "" {
      def to_html
        ""
      end
    }
  end

  rule words
    word+ {
      def to_html
        matches.map{|m| m.to_html}.join("")
      end
    }
  end

  rule space
    ("\t" | " " | " " | " ") {
      def to_html
        " "
      end
    }
  end

  rule word
    ((letter+) space?) {
      def to_html
        self.to_s 
      end 
    }
  end
end


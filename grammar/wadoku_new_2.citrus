grammar WadokuNewGrammar 

  rule entry
    (pos? space* dom? space* ( "(" tags:(tag)+ ")" )? space* meanings:(meaning_group)+ ) {
      def to_html
        (dom ? dom.to_html.to_s : "") + (tags ? "(" + tags.matches.map{|t| t.to_html}.join("") + ") " : "") + meanings.matches.map{|m| m.to_html}.join("")  
      end
    }
  end


  rule pos
    ("(<POS: " (content)+  "."? ">)") {
      def to_html
        ""
      end
    }
  end

  rule pict
    (bracketed_tags space* ".") {
      def to_html
        bracketed_tags.to_html + space.to_s + "."
      end
    }
  end

  rule meaning_group
    ( number:("[" /\d+/ "]")? "<MGr:" space* dom? space* (ra:bracketed_tags)? space* tres:(tre)+ space* (pre:bracketed_tags)? space* ">" space* (after:bracketed_tags)? space* ending:("." | "//")? (sepspace:space)? pict?) {

      def to_html
        (number ? "<span class='mg_nr'>#{number.to_s}<span> " : "") + (dom ? dom.to_html + " " : "") + (ra ? ra.to_html.to_s + " " : "") + tres.matches.map{|t| t.to_html}.join("") + (pre ? pre.to_html.to_s : "") + (after ? after.to_html.to_s : "") + ending.to_s + sepspace.to_s + (pict ? pict.to_html : "")
      end
    }
  end

  rule bracketed_tags
    ( "(" space* tags:(tag)+ space* ")" ) {
      def to_html
        "(#{tags.matches.map(&:to_html).join("")})"
      end
    }
  end

  rule tre
    ("<TrE:" space* contents:(content)+ ">" sep:(";")? ending:space*) {
      def to_html
        contents.matches.map{|c| c.to_html}.join("") + sep.to_s + ending.to_s
      end 
    }
  end

  rule content
    jap | title | tag | genus | abbrev | word | space | punctuation | dom | symbol | simple_tag | bracketed_tags | number
  end

  rule number
    /\d+/ {
      def to_html
        self.to_s
      end
    } 
  end

  rule simple_tag
    ("<" co:(/[^>]+/) ">") {
      def to_html
        "<span class='#{co.to_s.downcase}'>(#{co.to_s})</span> "
      end  
    }
  end

  rule title
    ("<Title " cla:(/[^:]+/) ":" space* contents:(content)+ ">") {
      def to_html
        "<span class='title #{cla.to_s.downcase}'>#{contents.matches.map{|c| c.to_html}.join("")}</span>"
      end
    }
  end

  rule dom
    ("{" tag "}") {
      def to_html
        "{" + tag.to_html + "}"
      end 
    }
  end

  rule jap
    ("<Jap.:" space* content:(/[^>]+/) ">" space*) {
      def to_html
        "<span class='jap'>#{content.to_s}</span>"
      end
    }
  end

  rule punctuation
    ("!" | ","| ".") {
      def to_html 
        self.to_s
      end
    }
  end

  rule symbol
    ("⇒" | "⇔" | "→" | "⇒" | "‑" | "[" | "]" | "=" | "–" | "☞" | ":" ) {
      def to_html
        self.to_s
      end
    } 

  end

  rule genus
    ("<HW " sex:word ":" space* noun:(abbrev | word) ">") {
      def to_html
        "<span class='genus #{sex.to_s.downcase}'>#{noun}</span>"
      end
    }
  end

  rule tag
    ("<" spanclass:word (".:" | ":") space* contents:(content)+ ">" space* sep:(";"|"；")? space*) {
      def to_html
        "<span class='#{spanclass.to_s.downcase}'>#{contents.matches.map{|c| c.to_html}.join("")}</span>" + (sep ? sep.to_s : "")
      end
    }
  end


  rule letter
    [\/‑\-a-zA-ZäüöÄÜÖßōīēāūŪŌĪĒĀ,·’…„“\wÁó]
  end

  rule nothing
    "" {
      def to_html
        ""
      end
    }
  end

  rule abbrev
    (word ".") {
      def to_html
        self.to_s
      end
    }
  end

  rule words
    word+ {
      def to_html
        matches.map{|m| m.to_html}.join("")
      end
    }
  end

  rule space
    ("\t" | " " | " " | " ") {
      def to_html
        " "
      end
    }
  end

  rule word
    ((letter+) space?) {
      def to_html
        self.to_s 
      end 
    }
  end

end
